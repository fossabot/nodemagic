#!/bin/bash

txt_red='\033[0;31m' # Red
txt_grn='\033[0;32m' # Green
txt_ylw='\033[0;33m' # Yellow
txt_rst='\033[0m'    # Text Reset

cache_dir="$HOME/.autonode"
bin_dir="${cache_dir}/node_modules/.bin"

log () {
  [ -z "$1" ] || echo -e "[AUTONODE LOG] $1"
}

err () {
  [ -z "$1" ] || echo -e "${txt_red}[AUTONODE ERROR]${txt_rst} $1"
}

warn () {
  [ -z "$1" ] || echo -e "${txt_ylw}[AUTONODE WARNING]${txt_rst} $1"
}

die () {
  err "$1"
  exit -1
}

# Let's make sure we're running something
[ -z "$1" ] && die "usage: autonode node|npm ..."

# Verify that you have at least some kind of node
which node 2>&1>/dev/null || die "\"node\" command not found. Node.js/io.js \
  is probably not installed on this system"

# Verify that package.json exists
[ -f ./package.json ] || die "\"package.json\" is not in $PWD. Autonode must \
  be run from the root of a node project directory"

# Set up cache directory
[ -d $cache_dir ] || mkdir -p $cache_dir/node_modules

# Read host node and NPM versions
host_node_version=$(node -v | tr -d v)
host_npm_version=$(npm -v)

read_target_version () {
  local version
  version=$(node -e "console.log(require('./package.json').engines.${1})" 2>/dev/null)
  [ -z "$version" ] && return -1
  echo $version
  return 0
}

read_arch () {
  local arch
  local isa
  uname=$(uname -a)
  local arch=darwin
  echo $uname | grep Linux && arch=linux

  local isa=x86
  echo $uname | grep x86_64 && isa=x64

  echo $arch-$isa
}

# Read target node and NPM versions
target_node_version="$(read_target_version node || echo $host_node_version)"
target_npm_version="$(read_target_version npm || echo $host_npm_version)"

# log "Host node version   ${txt_ylw}$host_node_version${txt_rst}"
# log "Target node version ${txt_grn}$target_node_version${txt_rst}"
# log "Host npm version    ${txt_ylw}$host_npm_version${txt_rst}"
# log "Target npm version  ${txt_grn}$target_npm_version${txt_rst}"

host_npm_install="npm install \
  --registry=https://registry.npmjs.org \
  --always-auth=false \
  --loglevel=silent \
  --spin=false"

# Bootstrap semver
[ -f "${bin_dir}/semver" ] || $host_npm_install --prefix=${cache_dir} semver > /dev/null

if $(${bin_dir}/semver $host_npm_version -r $target_npm_version > /dev/null); then
  target_npm="npm"
else
  target_npm_dir=${cache_dir}/npm/${target_npm_version}
  target_npm="${target_npm_dir}/node_modules/.bin/npm"
  if [ ! -d ${target_npm_dir} ]; then
    mkdir -p ${target_npm_dir}/node_modules
    log "Installing npm@${target_npm_version}..."
    $host_npm_install --prefix=${target_npm_dir} npm@${target_npm_version}
  fi
fi

if $(${bin_dir}/semver $host_node_version -r $target_node_version > /dev/null); then
  target_node="node"
else
  target_node_dir=${cache_dir}/node/${target_node_version}
  target_node="${target_node_dir}/bin/node"
  if [ ! -d ${target_node_dir} ]; then
    mkdir -p ${target_node_dir}
    log "Installing node@${target_node_version}..."

    arch=$(read_arch)
    node_url=http://nodejs.org/dist/v${target_node_version}/node-v${target_node_version}-${arch}.tar.gz

    pushd ${target_node_dir}
      curl -q ${node_url} | tar xz --strip-components=1 || rmdir -p ${target_node_dir}
    popd
  fi
fi

if [ "$1" == "npm" ]; then
  $target_npm "${*:2}"
else
  $target_node "${*:2}"
fi
